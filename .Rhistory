library(ggthemes)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(pROC)
library(janitor)
library(glmnet)
library(ISLR)
library(ISLR2)
tidymodels_prefer()
library(ranger)
library(rpart.plot)
library(corrplot)
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(pROC)
library(janitor)
library(glmnet)
library(ISLR)
library(ISLR2)
tidymodels_prefer()
tune_tree <- tune_grid(
pokemon_forest_wkflow,
resamples = pokemon.fold,
grid = param1_grid,
metrics = metric_set(roc_auc)
)
autoplot(tune_tree)
collect_metrics(tune_tree)
best_model <- select_best(tune_tree, metric = 'roc_auc') %>% # why model 06
augment(pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water)
collect_metrics(tune_tree) %>%
augment(pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water)
x <- collect_metrics(tune_tree) %>%
augment(pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water)
collect_metrics(tune_tree)
best_model <- select_best(tune_tree, metric = 'roc_auc') # why model 06
pokemon_tree_best <- finalize_workflow(pokemon_wkflow, best_model)
pokemon_tree_best_fit <- fit(pokemon_tree_best, data = pokemon.training) %>%
augment(pokemon_tree_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water)
pokemon_tree_best_fit
augment(pokemon_tree_best_fit, pokemon.training, type = 'prob')
collect_metrics(tune_tree)
best_model <- select_best(tune_tree, metric = 'roc_auc') # why model 06
pokemon_tree_best <- finalize_workflow(pokemon_wkflow, best_model)
pokemon_tree_best_fit <- fit(pokemon_tree_best, data = pokemon.training) %>%
augment(pokemon_tree_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Buy:.pred_Water)
augment(pokemon.final.fit, pokemon.testing, type='prob')
augment(pokemon_tree_best_fit, pokemon.training, type = 'prob')
collect_metrics(tune_tree)
best_model <- select_best(tune_tree, metric = 'roc_auc') # why model 06
pokemon_tree_best <- finalize_workflow(pokemon_wkflow, best_model)
pokemon_tree_best_fit <- fit(pokemon_tree_best, data = pokemon.training) %>%
augment(pokemon_tree_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Buy:.pred_Water)
collect_metrics(tune_tree)
best_model <- select_best(tune_tree, metric = 'roc_auc') # why model 06
pokemon_tree_best <- finalize_workflow(pokemon_wkflow, best_model)
pokemon_tree_best_fit <- fit(pokemon_tree_best, data = pokemon.training) %>%
augment(pokemon_tree_best_fit, pokemon.training, type = 'class') %>%
roc_auc(truth = type_1, estimate = .pred_class) #???
augment(pokemon_tree_best_fit, pokemon.training, type = 'class')
collect_metrics(tune_tree)
best_model <- select_best(tune_tree, metric = 'roc_auc') # why model 06
pokemon_tree_best <- finalize_workflow(pokemon_wkflow, best_model)
pokemon_tree_best_fit <- fit(pokemon_tree_best, data = pokemon.training) %>%
augment(pokemon_tree_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water) #???
pokemon.recipe <- recipe(type_1 ~ legendary+generation+sp_atk+attack+speed+defense+hp+sp_def, data = pokemon.training) %>%
step_dummy(c(legendary,generation)) %>%
step_center(all_predictors()) %>%  ## do we need all_predictors()???
step_scale(all_predictors())
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(pROC)
library(janitor)
library(glmnet)
library(ISLR)
library(ISLR2)
tidymodels_prefer()
## table reading
df0 <- read.csv('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/HWs/homework-5/data/Pokemon.csv')
df <- clean_names(df0)
df0
df
ggplot(df, aes(type_1))+
geom_bar() ## plotting the type_1 variable to a bar chart
df1 <- dplyr::filter(df, type_1 %in% c('Bug','Fire','Grass','Normal','Water','Psychic')) %>%
mutate(type_1 = factor(type_1),
legendary = factor(legendary),
generation = factor(generation)) ## select the required outcomes and factor type_1, legendary, and generation.
set.seed(721) ## set seed to stabilize the outcome
pokemon.split <- initial_split(df1, prop = 0.8, strata = type_1)
pokemon.training <- training(pokemon.split)
pokemon.testing <- testing(pokemon.split)
pokemon.fold <- vfold_cv(pokemon.training, v=5, strata = type_1) ## return the distribution of strata variable to each fold.
pokemon.recipe <- recipe(type_1 ~ legendary+generation+sp_atk+attack+speed+defense+hp+sp_def, data = pokemon.training) %>%
step_dummy(c(legendary,generation)) %>%
step_center(all_predictors()) %>%  ## do we need all_predictors()???
step_scale(all_predictors())
pokemon.recipe %>%
prep() %>%
juice() ## check whether legendary and generation are dummy or nor (outcomes should be 0/1)
pokemon.recipe <- recipe(type_1 ~ legendary+generation+sp_atk+attack+speed+defense+hp+sp_def, data = pokemon.training) %>%
step_center(all_numerical_predictors()) %>%  ## do we need all_predictors()???
step_scale(all_numerical_predictors()) %>%
step_dummy(c(legendary,generation))
pokemon.recipe %>%
prep() %>%
juice() ## check whether legendary and generation are dummy or nor (outcomes should be 0/1)
pokemon.recipe <- recipe(type_1 ~ legendary+generation+sp_atk+attack+speed+defense+hp+sp_def, data = pokemon.training) %>%
step_center(all_predictors()) %>%  ## do we need all_predictors()???
step_scale(all_predictors()) %>%
step_dummy(c(legendary,generation))
pokemon.recipe %>%
prep() %>%
juice() ## check whether legendary and generation are dummy or nor (outcomes should be 0/1)
pokemon.recipe <- recipe(type_1 ~ legendary+generation+sp_atk+attack+speed+defense+hp+sp_def, data = pokemon.training) %>%
step_center(all_numeric_predictors()) %>%  ## do we need all_predictors()???
step_scale(all_numeric_predictors()) %>%
step_dummy(c(legendary,generation))
pokemon.recipe %>%
prep() %>%
juice() ## check whether legendary and generation are dummy or nor (outcomes should be 0/1)
collect_metrics(tune_tree)
best_model <- select_best(tune_tree, metric = 'roc_auc') # why model 06
pokemon_tree_best <- finalize_workflow(pokemon_wkflow, best_model)
pokemon_tree_best_fit <- fit(pokemon_tree_best, data = pokemon.training) %>%
augment(pokemon_tree_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water) #???
best_model
collect_metrics(tune_tree)
best_model <- select_best(tune_tree, metric = 'roc_auc') # why model 06
pokemon_tree_best <- finalize_workflow(pokemon_wkflow, best_model)
pokemon_tree_best_fit <- fit(pokemon_tree_best, data = pokemon.training) %>%
augment(pokemon_tree_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water) #???
augment(pokemon_tree_best_fit, pokemon.training, type = 'prob')
collect_metrics(tune_tree)
best_model <- select_best(tune_tree, metric = 'roc_auc') # why model 06
pokemon_tree_best <- finalize_workflow(pokemon_wkflow, best_model)
pokemon_tree_best_fit <- fit(pokemon_tree_best, data = pokemon.training) %>%
augment(pokemon_tree_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water) #???
collect_metrics(tune_tree)
best_model <- select_best(tune_tree, metric = 'roc_auc')
pokemon_tree_best <- finalize_workflow(pokemon_wkflow, best_model)
pokemon_tree_best_fit <- fit(pokemon_tree_best, data = pokemon.training)
best_model
str(pokemon.training)
pokemon_wkflow
pokemon.recipe <- recipe(type_1 ~ legendary+generation+sp_atk+attack+speed+defense+hp+sp_def, data = pokemon.training) %>%
step_dummy(c(legendary,generation)) %>%
step_center() %>%  ## do we need all_predictors()???
step_scale()
pokemon.training
pokemon_data_2_prep =prep(pokemon.recipe)
pokemon_data_2 = juice(pokemon_data_2_prep)
pokemon_data_2
best_model
tree.pokemon <- decision_tree() %>%
set_engine('rpart') %>%
set_mode('classification')
pokemon_wkflow <- workflow() %>%
add_model(tree.pokemon %>% set_args(cost_complexity = tune())) %>%
add_recipe(pokemon.recipe)
param_grid <- grid_regular(cost_complexity(range = c(-3,-1)), levels = 10)
tune_tree <- tune_grid(
pokemon_wkflow,
resamples = pokemon.fold,
grid = param_grid,
metrics = metric_set(roc_auc)
)
autoplot(tune_tree)
collect_metrics(tune_tree)
best_model <- select_best(tune_tree, metric = 'roc_auc')
pokemon_tree_best <- finalize_workflow(pokemon_wkflow, best_model)
# pokemon_data_2_prep =prep(pokemon.recipe)
# pokemon_data_2 = juice(pokemon_data_2_prep)
#
# pokemon_wkflow <- workflow() %>%
#   add_model(tree.pokemon %>% set_args(cost_complexity = tune())) %>%
#   add_recipe(pokemon.recipe)
pokemon_tree_best_fit <- fit(pokemon_tree_best, data = pokemon.training)
augment(pokemon_tree_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water) #???
tune_forest <- tune_grid(
pokemon_forest_wkflow,
resamples = pokemon.fold,
grid = param1_grid,
metrics = metric_set(roc_auc)
)
autoplot(tune_tree)
tune_forest <- tune_grid(
pokemon_forest_wkflow,
resamples = pokemon.fold,
grid = param1_grid,
metrics = metric_set(roc_auc)
)
autoplot(tune_forest)
collect_metrics(tune_forest)
best_model2 <- select_best(tune_forest, metric = 'roc_auc')
pokemon_forest_best <- finalize_workflow(pokemon_forest_wkflow, best_model2)
pokemon_forest_best_fit <- fit(pokemon_forest_best, data = pokemon.training)
augment(pokemon_forest_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water)
vip(pokemon_forest_best_fit)
install.packages('xgboost')
install.packages('vip')
library(ranger)
library(rpart.plot)
library(corrplot)
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(pROC)
library(janitor)
library(glmnet)
library(ISLR)
library(ISLR2)
tidymodels_prefer()
library(xgboost)
library(vip)
library(ranger)
library(rpart.plot)
library(corrplot)
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(pROC)
library(janitor)
library(glmnet)
library(ISLR)
library(ISLR2)
tidymodels_prefer()
collect_metrics(tune_forest)
best_model2 <- select_best(tune_forest, metric = 'roc_auc')
pokemon_forest_best <- finalize_workflow(pokemon_forest_wkflow, best_model2)
pokemon_forest_best_fit <- fit(pokemon_forest_best, data = pokemon.training)
random_forest_roc <- augment(pokemon_forest_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water)
vip(pokemon_forest_best_fit)
vip(pokemon_forest_best_fit)
collect_metrics(tune_forest)
best_model2 <- select_best(tune_forest, metric = 'roc_auc')
pokemon_forest_best <- finalize_workflow(pokemon_forest_wkflow, best_model2)
pokemon_forest_best_fit <- fit(pokemon_forest_best,type_1 ~., data = pokemon.training)
pokemon_vip_tree <- fit(best_model2, type_1 ~., data = pokemon.training)
pokemon_vip_tree <- fit(pokemon_forest_best, type_1 ~., data = pokemon.training)
?fit()
pokemon_forest_model
collect_metrics(tune_forest)
best_model2 <- select_best(tune_forest, metric = 'roc_auc')
pokemon_forest_best <- finalize_workflow(pokemon_forest_wkflow, best_model2)
pokemon_forest_best_fit <- fit(pokemon_forest_best, data = pokemon.training)
random_forest_roc <- augment(pokemon_forest_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water)
vip(pokemon_forest_best_fit. type_1~.)
vip(pokemon_forest_best_fit, type_1~.)
pokemon_boost_model <- boost_tree(trees = tune()) %>%
set_engine("xgboost") %>%
set_mode("regression")
pokemon_boost_wkflow <- workflow() %>%
add_model(pokemon_boost_wkflow) %>%
add_recipe(pokemon.recipe)
pokemon_boost_model <- boost_tree(trees = tune()) %>%
set_engine("xgboost") %>%
set_mode("regression")
pokemon_boost_wkflow <- workflow() %>%
add_model(pokemon_boost_model) %>%
add_recipe(pokemon.recipe)
param2_grid <- grid_regular
tune_boost <- tune_grid(
pokemon_boost_wkflow,
resamples = pokemon.fold,
grid = param2_grid,
metrics = metric_set(roc_auc)
)
pokemon_boost_model <- boost_tree(trees = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
pokemon_boost_wkflow <- workflow() %>%
add_model(pokemon_boost_model) %>%
add_recipe(pokemon.recipe)
param2_grid <- grid_regular
tune_boost <- tune_grid(
pokemon_boost_wkflow,
resamples = pokemon.fold,
grid = param2_grid,
metrics = metric_set(roc_auc)
)
pokemon_boost_model <- boost_tree(trees = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
pokemon_boost_wkflow <- workflow() %>%
add_model(pokemon_boost_model) %>%
add_recipe(pokemon.recipe)
param2_grid <- grid_regular(trees = c(10,2000), levels = 10)
pokemon_boost_model <- boost_tree(trees = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
pokemon_boost_wkflow <- workflow() %>%
add_model(pokemon_boost_model) %>%
add_recipe(pokemon.recipe)
param2_grid <- grid_regular(trees(range(c(10,2000))), levels = 10)
tune_boost <- tune_grid(
pokemon_boost_wkflow,
resamples = pokemon.fold,
grid = param2_grid,
metrics = metric_set(roc_auc)
)
autoplot(tune_boost)
collect_metrics(tune_boost)
best_model3 <- select_best(tune_boost, metric = 'roc_auc')
pokemon_boost_best <- finalize_workflow(pokemon_boost_wkflow, best_model3)
pokemon_boost_best_fit <- fit(pokemon_boost_best, data = pokemon.training)
boosted_tree_roc <- augment(pokemon_boost_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth=type_1, estimate = .pred_Bug:.pred_Water)
collect_metrics(tune_boost)
best_model3 <- select_best(tune_boost, metric = 'roc_auc')
pokemon_boost_best <- finalize_workflow(pokemon_boost_wkflow, best_model3)
pokemon_boost_best_fit <- fit(pokemon_boost_best, data = pokemon.training)
boosted_tree_roc <- augment(pokemon_boost_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth=type_1, estimate = .pred_Bug:.pred_Water)
boosted_tree_roc
rbind(pruned_tree_roc, random_forest_roc, boosted_tree_roc)
collect_metrics(tune_tree)
best_model <- select_best(tune_tree, metric = 'roc_auc')
pokemon_tree_best <- finalize_workflow(pokemon_wkflow, best_model)
pokemon_tree_best_fit <- fit(pokemon_tree_best, data = pokemon.training)
pruned_tree_roc <- augment(pokemon_tree_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water)
collect_metrics(tune_forest)
best_model2 <- select_best(tune_forest, metric = 'roc_auc')
pokemon_forest_best <- finalize_workflow(pokemon_forest_wkflow, best_model2)
pokemon_forest_best_fit <- fit(pokemon_forest_best, data = pokemon.training)
random_forest_roc <- augment(pokemon_forest_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water)
random_forest_roc
rbind(pruned_tree_roc, random_forest_roc, boosted_tree_roc)
rbind(pruned_tree_roc, random_forest_roc, boosted_tree_roc) %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'))
rbind(pruned_tree_roc, random_forest_roc, boosted_tree_roc) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'))
bind_rows(pruned_tree_roc, random_forest_roc, boosted_tree_roc) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'))
bind_rows(pruned_tree_roc, random_forest_roc, boosted_tree_roc) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'))
?mutate
bind_rows(pruned_tree_roc, random_forest_roc, boosted_tree_roc) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'), .before = .metric)
result <- bind_rows(pruned_tree_roc, random_forest_roc, boosted_tree_roc) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'), .before = .metric)
result <- bind_rows(pruned_tree_roc, random_forest_roc, boosted_tree_roc) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'), .before = .metric)
select_best(result, metric = 'roc_auc')
typeof(tune_boost)
typeof(result)
result <- bind_rows(pruned_tree_roc, random_forest_roc, boosted_tree_roc) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'), .before = .metric)
select_best(result, metric = 'roc_auc')
result
result <- bind_rows(pruned_tree_roc, random_forest_roc, boosted_tree_roc) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'), .before = .metric)
select_best(result, metric = '.estimate')
result <- bind_rows(pruned_tree_roc, random_forest_roc, boosted_tree_roc) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'), .before = .metric)
select_best(result, metric = .estimate)
result <- bind_rows(pruned_tree_roc, random_forest_roc, boosted_tree_roc) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'), .before = .metric)
select_best(result)
result <- bind_rows(best_model, best_model2, best_model3) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'), .before = .metric)
result <- bind_rows(best_model, best_model2, best_model3)
result
result <- bind_rows(best_model, best_model2, best_model3) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'))
#select_best(result)
result
result <- bind_rows(best_model, best_model2, best_model3) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'), .before = cost_complexity)
#select_best(result)
result
result <- bind_rows(best_model, best_model2, best_model3) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'), .before = cost_complexity)
select_best(result)
result <- bind_rows(best_model, best_model2, best_model3) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'), .before = cost_complexity)
select_best(result, metric = 'roc_auc')
result
best_model
collect_metrics(tune_tree)
best_model <- select_best(tune_tree, metric = 'roc_auc')
pokemon_tree_best <- finalize_workflow(pokemon_wkflow, best_model)
pokemon_tree_best_fit <- fit(pokemon_tree_best, data = pokemon.training)
augment(pokemon_tree_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water)
best_model
collect_metrics(tune_forest)
best_model2 <- select_best(tune_forest, metric = 'roc_auc')
pokemon_forest_best <- finalize_workflow(pokemon_forest_wkflow, best_model2)
pokemon_forest_best_fit <- fit(pokemon_forest_best, data = pokemon.training)
augment(pokemon_forest_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water)
best_model2
best_model3
result <- bind_rows(best_model, best_model2, best_model3) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'), .before = cost_complexity)
result
collect_metrics(tune_tree)
best_model
collect_metrics(tune_tree)
?select_best
collect_metrics(tune_tree)
best_model <- select_best(tune_tree)
pokemon_tree_best <- finalize_workflow(pokemon_wkflow, best_model)
pokemon_tree_best_fit <- fit(pokemon_tree_best, data = pokemon.training)
augment(pokemon_tree_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water)
best_model
collect_metrics(tune_tree)
best_model <- select_best(tune_tree, metric = 'roc_auc')
pokemon_tree_best <- finalize_workflow(pokemon_wkflow, best_model)
pokemon_tree_best_fit <- fit(pokemon_tree_best, data = pokemon.training)
augment(pokemon_tree_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water)
best_model
collect_metrics(tune_tree)
best_model <- select_best(tune_tree, metric = 'roc_auc')
pokemon_tree_best <- finalize_workflow(pokemon_wkflow, best_model)
pokemon_tree_best_fit <- fit(pokemon_tree_best, data = pokemon.training)
augment(pokemon_tree_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water)
best_model
collect_metrics(tune_tree)
collect_metrics(tune_tree)
best_model <- select_best(tune_tree, metric = 'roc_auc')
pokemon_tree_best <- finalize_workflow(pokemon_wkflow, best_model)
pokemon_tree_best_fit <- fit(pokemon_tree_best, data = pokemon.training)
pruned_tree <- augment(pokemon_tree_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water)
pruned_tree
collect_metrics(tune_forest)
best_model2 <- select_best(tune_forest, metric = 'roc_auc')
pokemon_forest_best <- finalize_workflow(pokemon_forest_wkflow, best_model2)
pokemon_forest_best_fit <- fit(pokemon_forest_best, data = pokemon.training)
random_forest <- augment(pokemon_forest_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth = type_1, estimate = .pred_Bug:.pred_Water)
random_forest
collect_metrics(tune_boost)
best_model3 <- select_best(tune_boost, metric = 'roc_auc')
pokemon_boost_best <- finalize_workflow(pokemon_boost_wkflow, best_model3)
pokemon_boost_best_fit <- fit(pokemon_boost_best, data = pokemon.training)
boosted_tree <- augment(pokemon_boost_best_fit, pokemon.training, type = 'prob') %>%
roc_auc(truth=type_1, estimate = .pred_Bug:.pred_Water)
boosted_tree
result <- bind_rows(pruned_tree, random_forest, boosted_tree) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'), .before = .metric)
select(result, metric = 'roc_auc')
result <- bind_rows(pruned_tree, random_forest, boosted_tree) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'), .before = .metric)
result
result <- bind_rows(pruned_tree, random_forest, boosted_tree) %>%
tibble() %>%
mutate(model = c('pruned tree model', 'random forest model', 'boost tree model'), .before = .metric)
select_best(result, metric = '.estimate')
