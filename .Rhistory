set_engine('glmnet')
pokemon.wkflow <- workflow() %>%
add_recipe(pokemon.recipe) %>%
add_model(multilreg)
regular_grid <- grid_regular(penalty(range = c(-5,5)), mixture(range = c(0,1)), levels = 10)
tune.model <- tune_grid(
pokemon.wkflow,
resamples = pokemon.fold,
grid = regular_grid
)
autoplot(tune.model)
pokemon.recipe <- recipe(type_1 ~ legendary+generation+sp_atk+attack+speed+defense+hp+sp_def, data = pokemon.training) %>%
step_dummy(legendary, generaion) %>%  ## how to check that these two are dummy now.
step_center() %>%
step_scale()
multilreg <- multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine('glmnet')
pokemon.wkflow <- workflow() %>%
add_recipe(pokemon.recipe) %>%
add_model(multilreg)
regular_grid <- grid_regular(penalty(range = c(-5,5)), mixture(range = c(0,1)), levels = 10)
tune.model <- tune_grid(
pokemon.wkflow,
resamples = pokemon.fold,
grid = regular_grid
)
autoplot(tune.model)
pokemon.recipe <- recipe(type_1 ~ legendary+generation+sp_atk+attack+speed+defense+hp+sp_def, data = pokemon.training) %>%
step_dummy(legendary, generation) %>%  ## how to check that these two are dummy now.
step_center() %>%
step_scale()
multilreg <- multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine('glmnet')
pokemon.wkflow <- workflow() %>%
add_recipe(pokemon.recipe) %>%
add_model(multilreg)
regular_grid <- grid_regular(penalty(range = c(-5,5)), mixture(range = c(0,1)), levels = 10)
tune.model <- tune_grid(
pokemon.wkflow,
resamples = pokemon.fold,
grid = regular_grid
)
autoplot(tune.model)
set.seed(721)
pokemon.split <- initial_split(df1, prop = 0.8, strata = type_1)
pokemon.training <- training(pokemon.split)
pokemon.testing <- testing(pokemon.split)
pokemon.fold <- vfold_cv(pokemon.training, v=5, strata = type_1)
summary(pokemon.fold)
set.seed(721)
pokemon.split <- initial_split(df1, prop = 0.8, strata = type_1)
pokemon.training <- training(pokemon.split)
pokemon.testing <- testing(pokemon.split)
pokemon.fold <- vfold_cv(pokemon.training, v=5, strata = type_1)
pokemon.fold
best.model <- select_best(tune.model)
best.model <- select_best(tune.model)
best.model
tune.model <- tune_grid(
pokemon.wkflow,
resamples = pokemon.fold,
grid = regular_grid
)
autoplot(tune.model)
best.model <- select_best(tune.model)
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
best.model <- select_best(tune.model)
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
best.model <- select_best(tune.model)
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing)
best.model <- select_best(tune.model)
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing) %>%
accuracy(type_1, estimate = .pred)
best.model <- select_best(tune.model)
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing) %>%
accuracy(truth = type_1, estimate = .pred)
best.model <- select_best(tune.model)
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing) %>%
accuracy(truth = type_1, estimate = .pred_legendary)
best.model <- select_best(tune.model)
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing) %>%
accuracy(truth = type_1, estimate = .pred)
best.model <- select_best(tune.model)
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing) %>%
roc_auc(truth = type_1, estimate = .pred)
pokemon.final.fit
?augment
best.model <- select_best(tune.model)
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing) %>%
accuracy()
best.model <- select_best(tune.model)
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing) %>%
accuracy(truth = type_1)
best.model <- select_best(tune.model)
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing) %>%
accuracy(truth = type_1, estimate = ,pred)
best.model <- select_best(tune.model)
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing)
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing)
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing) %>%
conf_mat(truth = type_1, estimate = .pred)
?conf_mat
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing) %>%
conf_mat(truth = type_1, estimate = legendary)
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing) %>%
conf_mat(truth = type_1, estimate = pred)
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(pROC)
library(janitor)
library(glmnet)
tidymodels_prefer()
df <- clean_names(read.csv('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/HWs/homework-5/data/Pokemon.csv'))
df
ggplot(df, aes(type_1))+
geom_bar()
df1 <- filter(df, type_1 == c('Bug','Fire','Grass','Normal','Water','Psychic')) %>%
mutate(type_1 = factor(type_1),
legendary = factor(legendary))
df1
set.seed(721)
pokemon.split <- initial_split(df1, prop = 0.8, strata = type_1)
pokemon.training <- training(pokemon.split)
pokemon.testing <- testing(pokemon.split)
pokemon.fold <- vfold_cv(pokemon.training, v=5, strata = type_1)
pokemon.recipe <- recipe(type_1 ~ legendary+generation+sp_atk+attack+speed+defense+hp+sp_def, data = pokemon.training) %>%
step_dummy(legendary, generation) %>%  ## how to check that these two are dummy now.
step_center() %>%
step_scale()
multilreg <- multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine('glmnet')
pokemon.wkflow <- workflow() %>%
add_recipe(pokemon.recipe) %>%
add_model(multilreg)
regular_grid <- grid_regular(penalty(range = c(-5,5)), mixture(range = c(0,1)), levels = 10)
tune.model <- tune_grid(
pokemon.wkflow,
resamples = pokemon.fold,
grid = regular_grid
) ## one: why warning says generation is ignored (as I made it dummy??); two: why classes have fewer than 8 observations.
autoplot(tune.model)
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
log_acc <- predict(log_new_fit, new_data = titanic_testing, type = 'class') %>%
bind_cols(titanic_testing %>% select(survived)) %>%
accuracy(truth = survived, estimate = .pred_class)
log_acc
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(pROC)
library(janitor)
library(glmnet)
tidymodels_prefer()
df <- clean_names(read.csv('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/HWs/homework-5/data/Pokemon.csv'))
df
ggplot(df, aes(type_1))+
geom_bar()
df1 <- filter(df, type_1 == c('Bug','Fire','Grass','Normal','Water','Psychic')) %>%
mutate(type_1 = factor(type_1),
legendary = factor(legendary))
df1
set.seed(721)
pokemon.split <- initial_split(df1, prop = 0.8, strata = type_1)
pokemon.training <- training(pokemon.split)
pokemon.testing <- testing(pokemon.split)
pokemon.fold <- vfold_cv(pokemon.training, v=5, strata = type_1)
pokemon.recipe <- recipe(type_1 ~ legendary+generation+sp_atk+attack+speed+defense+hp+sp_def, data = pokemon.training) %>%
step_dummy(legendary, generation) %>%  ## how to check that these two are dummy now.
step_center() %>%
step_scale()
multilreg <- multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine('glmnet')
pokemon.wkflow <- workflow() %>%
add_recipe(pokemon.recipe) %>%
add_model(multilreg)
regular_grid <- grid_regular(penalty(range = c(-5,5)), mixture(range = c(0,1)), levels = 10)
tune.model <- tune_grid(
pokemon.wkflow,
resamples = pokemon.fold,
grid = regular_grid
) ## one: why warning says generation is ignored (as I made it dummy??); two: why classes have fewer than 8 observations.
autoplot(tune.model)
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
multilreg <- multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine('glmnet')
pokemon.wkflow <- workflow() %>%
add_recipe(pokemon.recipe) %>%
add_model(multilreg)
regular_grid <- grid_regular(penalty(range = c(-5,5)), mixture(range = c(0,1)), levels = 10)
regular_grid
tune.model <- tune_grid(
pokemon.wkflow,
resamples = pokemon.fold,
grid = regular_grid
) ## one: why warning says generation is ignored (as I made it dummy??); two: why classes have fewer than 8 observations.
tune.model
autoplot(tune.model)
tune.model <- tune_grid(
pokemon.wkflow,
resamples = pokemon.fold,
grid = regular_grid
) ## one: why warning says generation is ignored (as I made it dummy??); two: why classes have fewer than 8 observations.
tune.model
autoplot(tune.model$.metrics)
?filter
ggplot(df, aes(type_1))+
geom_bar()
df1 <- dplyr::filter(df, type_1 == c('Bug','Fire','Grass','Normal','Water','Psychic')) %>%
mutate(type_1 = factor(type_1),
legendary = factor(legendary))
df1
ggplot(df, aes(type_1))+
geom_bar()
df1 <- dplyr::filter(df, type_1 == ('Bug','Fire','Grass','Normal','Water','Psychic')) %>%
ggplot(df, aes(type_1))+
geom_bar()
df1 <- dplyr::filter(df, type_1 == c('Bug','Fire','Grass','Normal','Water','Psychic')) %>%
mutate(type_1 = factor(type_1),
legendary = factor(legendary))
df1
ggplot(df, aes(type_1))+
geom_bar()
df1 <- dplyr::filter(df, type_1 %in% c('Bug','Fire','Grass','Normal','Water','Psychic')) %>%
mutate(type_1 = factor(type_1),
legendary = factor(legendary))
df1
ggplot(df, aes(type_1))+
geom_bar()
df1 <- dplyr::filter(df, type_1 %in% c('Bug','Fire','Grass','Normal','Water','Psychic')) %>%
mutate(type_1 = factor(type_1),
legendary = factor(legendary))
df1
set.seed(721)
pokemon.split <- initial_split(df1, prop = 0.8, strata = type_1)
pokemon.training <- training(pokemon.split)
pokemon.testing <- testing(pokemon.split)
pokemon.fold <- vfold_cv(pokemon.training, v=5, strata = type_1)
pokemon.recipe <- recipe(type_1 ~ legendary+generation+sp_atk+attack+speed+defense+hp+sp_def, data = pokemon.training) %>%
step_dummy(legendary, generation) %>%  ## how to check that these two are dummy now.
step_center() %>%
step_scale()
multilreg <- multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine('glmnet')
pokemon.wkflow <- workflow() %>%
add_recipe(pokemon.recipe) %>%
add_model(multilreg)
regular_grid <- grid_regular(penalty(range = c(-5,5)), mixture(range = c(0,1)), levels = 10)
regular_grid
tune.model <- tune_grid(
pokemon.wkflow,
resamples = pokemon.fold,
grid = regular_grid
) ## one: why warning says generation is ignored (as I made it dummy??); two: why classes have fewer than 8 observations.
pokemon.recipe <- recipe(type_1 ~ legendary+generation+sp_atk+attack+speed+defense+hp+sp_def, data = pokemon.training) %>%
step_dummy(legendary, generation) %>%  ## how to check that these two are dummy now.
step_center() %>%
step_scale()
pokemon.recipe %>%
prep() %>%
juice()
pokemon.recipe <- recipe(type_1 ~ legendary+generation+sp_atk+attack+speed+defense+hp+sp_def, data = pokemon.training) %>%
step_dummy(legendary+generation) %>%  ## how to check that these two are dummy now.
step_center() %>%
step_scale()
pokemon.recipe %>%
prep() %>%
juice()
pokemon.recipe <- recipe(type_1 ~ legendary+generation+sp_atk+attack+speed+defense+hp+sp_def, data = pokemon.training) %>%
step_dummy(c(legendary,generation)) %>%  ## how to check that these two are dummy now.
step_center() %>%
step_scale()
pokemon.recipe %>%
prep() %>%
juice()
ggplot(df, aes(type_1))+
geom_bar()
df1 <- dplyr::filter(df, type_1 %in% c('Bug','Fire','Grass','Normal','Water','Psychic')) %>%
mutate(type_1 = factor(type_1),
legendary = factor(legendary),
generation = factor(generation))
df1
set.seed(721)
pokemon.split <- initial_split(df1, prop = 0.8, strata = type_1)
pokemon.training <- training(pokemon.split)
pokemon.testing <- testing(pokemon.split)
pokemon.fold <- vfold_cv(pokemon.training, v=5, strata = type_1)
pokemon.recipe <- recipe(type_1 ~ legendary+generation+sp_atk+attack+speed+defense+hp+sp_def, data = pokemon.training) %>%
step_dummy(c(legendary,generation)) %>%  ## how to check that these two are dummy now.
step_center() %>%
step_scale()
pokemon.recipe %>%
prep() %>%
juice()
multilreg <- multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine('glmnet')
pokemon.wkflow <- workflow() %>%
add_recipe(pokemon.recipe) %>%
add_model(multilreg)
regular_grid <- grid_regular(penalty(range = c(-5,5)), mixture(range = c(0,1)), levels = 10)
regular_grid
tune.model <- tune_grid(
pokemon.wkflow,
resamples = pokemon.fold,
grid = regular_grid
) ## one: why warning says generation is ignored (as I made it dummy??); two: why classes have fewer than 8 observations.
tune.model
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing) %>%
accuracy(truth = type_1, estimate = .pred)
?accuracy
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing, type = 'class') %>%
accuracy(truth = type_1, estimate = .pred_class)
?augment
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing) %>%
roc_curve(truth = type_1, estimate = .pred_class)
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing) %>%
roc_curve(truth = type_1, estimate = .pred)
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing) %>%
roc_curve(truth = type_1, estimate = .pred_class)
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing, type = 'prob') %>%
roc_curve(truth = type_1, estimate = .pred)
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing, type = 'prob') %>%
roc_curve(truth = type_1, estimate = .pred_prob)
augment(pokemon.final.fit, pokemon.testing, type = 'prob')
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing) %>%
roc_curve(truth = type_1, estimate = .pred)
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing, type='prob') %>%
roc_curve(truth = type_1, estimate = .pred_Water)
best.model <- select_best(tune.model, metric = 'roc_auc')
best.model
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing, type='class') %>%
accuracy(truth = type_1, estimate = .pred_class)
augment(pokemon.final.fit, pokemon.testing, type='class')
multilreg <- multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine('glmnet')
pokemon.wkflow <- workflow() %>%
add_recipe(pokemon.recipe) %>%
add_model(multilreg)
regular_grid <- grid_regular(penalty(range = c(-5,5)), mixture(range = c(0,1)), levels = 10)
regular_grid
## table reading
df0 <- read.csv('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/HWs/homework-5/data/Pokemon.csv')
df <- clean_names(df0)
## table reading
df0 <- read.csv('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/HWs/homework-5/data/Pokemon.csv')
df <- clean_names(df0)
df0
df
?clean_names
roc_auc(truth = type_1, estimate = .pred_class) %>%
autoplot()
augment_final %>%
roc_auc(truth = type_1, estimate = .pred_class) %>%
autoplot()
best.model <- select_best(tune.model, metric = 'roc_auc')
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment_final <- augment(pokemon.final.fit, pokemon.testing, type='class') %>%
accuracy(truth = type_1, estimate = .pred_class)
augment_final %>%
roc_auc(truth = type_1, estimate = .pred_class) %>%
autoplot()
augment_final <- augment(pokemon.final.fit, pokemon.testing, type='class')
augment_final
augment_final %>%
roc_auc(truth = type_1, estimate = .pred_Water) %>%
autoplot()
augment_final %>%
roc_curve(truth = type_1, estimate = .pred_Water) %>%
autoplot()
augment_final %>%
roc_curve(truth = type_1, estimate = .pred_class) %>%
autoplot()
best.model <- select_best(tune.model, metric = 'roc_auc')
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing, type='class') %>%
accuracy(truth = type_1, estimate = .pred_class)
best.model <- select_best(tune.model, metric = 'roc_auc')
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing, type='class') %>%
accuracy(truth = type_1, estimate = .pred_class)
augment(pokemon.final.fit, pokemon.testing, type='prob') %>%
roc_curve(truth = type_1, estimate = .pred_prob)
best.model <- select_best(tune.model, metric = 'roc_auc')
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing, type='class') %>%
accuracy(truth = type_1, estimate = .pred_class)
augment(pokemon.final.fit, pokemon.testing, type='prob') %>%
roc_curve(truth = type_1, estimate = .pred_Water)
best.model <- select_best(tune.model, metric = 'roc_auc')
pokemon.final <- finalize_workflow(pokemon.wkflow, best.model)
pokemon.final.fit <- fit(pokemon.final, pokemon.training)
augment(pokemon.final.fit, pokemon.testing, type='class') %>%
accuracy(truth = type_1, estimate = .pred_class)
augment(pokemon.final.fit, pokemon.testing, type='prob')
augment(pokemon.final.fit, pokemon.testing, type='prob')
predict(log_new_fit, new_data = titanic_testing, type = 'class')
augment(log_new_fit, new_data = titanic_testing, type = 'class')
