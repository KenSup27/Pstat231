library(tidymodels)
library(tidyverse)
library(ggplot2)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
install.packages('naivebayes')
tidymodels_prefer()
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(naivebayes)
tidymodels_prefer()
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('KlaR') %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('KlaR') %>%
set_args(usekernel = FALSE)
nb_mode
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('KlaR') %>%
set_args(usekernel = FALSE)
nb_mode
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
#nb_fit <- fit(nb_wf, titanic_training)
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(e1071)
tidymodels_prefer()
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('KlaR') %>%
set_args(usekernel = FALSE)
nb_mode
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
#nb_fit <- fit(nb_wf, titanic_training)
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('KlaR') %>%
set_args(usekernel = FALSE)
nb_mode
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
tidymodels_prefer()
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('KlaR') %>%
set_args(usekernel = FALSE)
nb_mode
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('klaR') %>%
set_args(usekernel = FALSE)
nb_mode
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('klaR') %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('klaR') %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
set.seed(891) # keep the outcome stable
titanic_split <- initial_split(df, prop = 0.80, strata = survived) # split the data and stratified on survived
titanic_training <- training(titanic_split) # extract the training data
titanic_testing <- testing(titanic_split) # extract the testing data
titanic_training
# titanic_testing
set.seed(891) # keep the outcome stable
titanic_split <- initial_split(df, prop = 0.80, strata = survived) # split the data and stratified on survived
titanic_training <- training(titanic_split) # extract the training data
titanic_testing <- testing(titanic_split) # extract the testing data
#titanic_training
# titanic_testing
set.seed(891) # keep the outcome stable
titanic_split <- initial_split(df, prop = 0.80, strata = survived) # split the data and stratified on survived
titanic_training <- training(titanic_split) # extract the training data
titanic_testing <- testing(titanic_split) # extract the testing data
#titanic_training
# titanic_testing
set.seed(891) # keep the outcome stable
titanic_split <- initial_split(df, prop = 0.80, strata = survived) # split the data and stratified on survived
titanic_training <- training(titanic_split) # extract the training data
titanic_testing <- testing(titanic_split) # extract the testing data
#titanic_training
# titanic_testing
set.seed(891) # keep the outcome stable
titanic_split <- initial_split(df, prop = 0.80, strata = survived) # split the data and stratified on survived
titanic_training <- training(titanic_split) # extract the training data
titanic_testing <- testing(titanic_split) # extract the testing data
#titanic_training
# titanic_testing
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('klaR') %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
titanic_recipe <- recipe(survived ~ pclass+sex+age+sib_sp+parch+fare, data = titanic_training) %>%
step_impute_linear(impute_with = imp_vars(age)) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(terms = ~ starts_with('sex'):fare+
age:fare)
summary(titanic_recipe)
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('klaR') %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('klaR') %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_wf
nb_fit <- fit(nb_wf, titanic_training)
titanic_recipe <- recipe(survived ~ pclass+sex+age+sib_sp+parch+fare, data = titanic_training) %>%
step_impute_linear(impute_with = imp_vars(age)) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(terms = ~ starts_with('sex'):fare+
age:fare)
summary(titanic_recipe)
log_reg <- logistic_reg() %>%
set_engine('glm') %>%
set_mode('classification')
log_wf <- workflow() %>%
add_model(log_reg) %>%
add_recipe(titanic_recipe)
log_fit <- fit(log_wf, titanic_training)
lda_mode <- discrim_linear() %>%
set_engine('MASS') %>%
set_mode('classification')
lda_wf <- workflow() %>%
add_model(lda_mode) %>%
add_recipe(titanic_recipe)
lda_fit <- fit(lda_wf, titanic_training)
qda_mode <- discrim_quad() %>%
set_engine('MASS') %>%
set_mode('classification')
qda_wf <- workflow() %>%
add_model(qda_mode) %>%
add_recipe(titanic_recipe)
qda_fit <- fit(qda_wf, titanic_training)
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('klaR') %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('klaR') %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('klaR') %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
#nb_fit <- fit(nb_wf, titanic_training)
if (NA) {
print("ERROR")
}
titanic_training
titanic_recipe <- recipe(survived ~ pclass+sex+age+sib_sp+parch+fare, data = titanic_training) %>%
step_impute_linear(impute_with = imp_vars(age)) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(terms = ~ starts_with('sex'):fare+
age:fare)
summary(titanic_recipe)
titanic_recipe <- recipe(survived ~ pclass+sex+age+sib_sp+parch+fare, data = titanic_training) %>%
step_impute_linear(impute_with = imp_vars(age)) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(terms = ~ starts_with('sex'):fare+
age:fare)
summary(titanic_recipe)
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('klaR') %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('klaR') %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training) ???
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('klaR') %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
predict(log_fit, new_data = titanic_testing, type = 'prob')
predict(log_fit, new_data = titanic_testing, type = 'prob')
augment(log_fit, new_data = titanic_testing) %>%
conf_mat(truth = Suvived, estimate = .pred_class)
predict(log_fit, new_data = titanic_testing, type = 'prob')
augment(log_fit, new_data = titanic_testing) %>%
conf_mat(truth = suvived, estimate = .pred_class)
?conf_mat
predict(log_fit, new_data = titanic_testing, type = 'prob')
augment(log_fit, new_data = titanic_testing) %>%
conf_mat(truth = survived, estimate = .pred_class)
predict(log_fit, new_data = titanic_testing, type = 'prob')
augment(log_fit, new_data = titanic_testing) %>%
conf_mat(truth = survived)
predict(log_fit, new_data = titanic_testing, type = 'prob')
augment(log_fit, new_data = titanic_testing) %>%
conf_mat(truth = survived, estimate = pred)
predict(log_fit, new_data = titanic_testing, type = 'prob')
augment(log_fit, new_data = titanic_testing) %>%
conf_mat(truth = survived, estimate = 'pred')
predict(log_fit, new_data = titanic_testing, type = 'prob')
augment(log_fit, new_data = titanic_testing) %>%
conf_mat(truth = survived, estimate = .pred_class)
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('klaR') %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
tidymodels_prefer()
install.packages(c("cpp11", "data.table", "digest", "e1071", "fontawesome", "jsonlite", "lava", "markdown", "mgcv", "nlme", "openssl", "ragg", "recipes", "rpart", "rsconnect", "seriation", "styler", "sys", "vctrs", "xfun", "xts", "yaml"))
install.packages(c("cpp11", "data.table", "digest", "e1071", "fontawesome", "jsonlite", "lava", "markdown", "mgcv", "nlme", "openssl", "ragg", "recipes", "rpart", "rsconnect", "seriation", "styler", "sys", "vctrs", "xfun", "xts", "yaml"))
install.packages(c("cpp11", "data.table", "digest", "e1071", "fontawesome", "jsonlite", "lava", "markdown", "mgcv", "nlme", "openssl", "ragg", "recipes", "rpart", "rsconnect", "seriation", "styler", "sys", "vctrs", "xfun", "xts", "yaml"))
install.packages(c("cpp11", "data.table", "digest", "e1071", "fontawesome", "jsonlite", "lava", "markdown", "mgcv", "nlme", "openssl", "ragg", "recipes", "rpart", "rsconnect", "seriation", "styler", "sys", "vctrs", "xfun", "xts", "yaml"))
install.packages(c("cpp11", "data.table", "digest", "e1071", "fontawesome", "jsonlite", "lava", "markdown", "mgcv", "nlme", "openssl", "ragg", "recipes", "rpart", "rsconnect", "seriation", "styler", "sys", "vctrs", "xfun", "xts", "yaml"))
install.packages(c("cpp11", "data.table", "digest", "e1071", "fontawesome", "jsonlite", "lava", "markdown", "mgcv", "nlme", "openssl", "ragg", "recipes", "rpart", "rsconnect", "seriation", "styler", "sys", "vctrs", "xfun", "xts", "yaml"))
library(tidymodels)
library(tidymodels)
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
tidymodels_prefer()
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
tidymodels_prefer()
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('klaR') %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
df <- read.csv('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/HWs/homework-3/data/titanic.csv')
df
set.seed(891) # keep the outcome stable
titanic_split <- initial_split(df, prop = 0.80, strata = survived) # split the data and stratified on survived
set.seed(891) # keep the outcome stable
titanic_split <- initial_split(df, prop = 0.80, strata = survived) # split the data and stratified on survived
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
tidymodels_prefer()
set.seed(891) # keep the outcome stable
titanic_split <- initial_split(df, prop = 0.80, strata = survived) # split the data and stratified on survived
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
tidymodels_prefer()
df <- read.csv('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/HWs/homework-3/data/titanic.csv')
df
set.seed(891) # keep the outcome stable
titanic_split <- initial_split(df, prop = 0.80, strata = survived) # split the data and stratified on survived
titanic_training <- training(titanic_split) # extract the training data
titanic_testing <- testing(titanic_split) # extract the testing data
#titanic_training
# titanic_testing
ggplot(titanic_training, aes(survived))+
geom_bar()
cor_titanic <- titanic_training %>%
select(-c(survived, name, sex, ticket, cabin, embarked)) %>%  # eliminate chr type elements
correlate()
cor_titanic
rplot(cor_titanic) # plot the correlation between continuous elements.
ggplot(titanic_training, aes(survived))+
geom_bar()
ggplot(titanic_training, aes(survived))+
geom_bar()
ggplot(titanic_training, aes(survived))+
geom_bar()
cor_titanic <- titanic_training %>%
select(-c(survived, name, sex, ticket, cabin, embarked)) %>%  # eliminate chr type elements
correlate()
cor_titanic
rplot(cor_titanic) # plot the correlation between continuous elements.
titanic_recipe <- recipe(survived ~ pclass+sex+age+sib_sp+parch+fare, data = titanic_training) %>%
step_impute_linear(impute_with = imp_vars(age)) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(terms = ~ starts_with('sex'):fare+
age:fare)
summary(titanic_recipe)
log_reg <- logistic_reg() %>%
set_engine('glm') %>%
set_mode('classification')
log_wf <- workflow() %>%
add_model(log_reg) %>%
add_recipe(titanic_recipe)
log_fit <- fit(log_wf, titanic_training)
lda_mode <- discrim_linear() %>%
set_engine('MASS') %>%
set_mode('classification')
lda_wf <- workflow() %>%
add_model(lda_mode) %>%
add_recipe(titanic_recipe)
lda_fit <- fit(lda_wf, titanic_training)
qda_mode <- discrim_quad() %>%
set_engine('MASS') %>%
set_mode('classification')
qda_wf <- workflow() %>%
add_model(qda_mode) %>%
add_recipe(titanic_recipe)
qda_fit <- fit(qda_wf, titanic_training)
nb_mode <- naive_Bayes() %>%
set_mode('classification') %>%
set_engine('klaR') %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
predict(log_fit, new_data = titanic_testing, type = 'prob')
augment(log_fit, new_data = titanic_testing) %>%
conf_mat(truth = survived, estimate = .pred_class)
nb_mode <- naive_Bayes() %>%
set_mode("classification") %>%
set_engine("klaR") %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
?step_impute_linear()
titanic_recipe <- recipe(survived ~ pclass+sex+age+sib_sp+parch+fare, data = titanic_training) %>%
step_impute_linear(age) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(terms = ~ starts_with('sex'):fare+
age:fare)
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
tidymodels_prefer()
df <- read.csv('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/HWs/homework-3/data/titanic.csv')
df
set.seed(891) # keep the outcome stable
titanic_split <- initial_split(df, prop = 0.80, strata = survived) # split the data and stratified on survived
titanic_training <- training(titanic_split) # extract the training data
titanic_testing <- testing(titanic_split) # extract the testing data
#titanic_training
# titanic_testing
ggplot(titanic_training, aes(survived))+
geom_bar()
cor_titanic <- titanic_training %>%
select(-c(survived, name, sex, ticket, cabin, embarked)) %>%  # eliminate chr type elements
correlate()
cor_titanic
rplot(cor_titanic) # plot the correlation between continuous elements.
titanic_recipe <- recipe(survived ~ pclass+sex+age+sib_sp+parch+fare, data = titanic_training) %>%
step_impute_linear(age) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(terms = ~ starts_with('sex'):fare+
age:fare)
summary(titanic_recipe)
nb_mode <- naive_Bayes() %>%
set_mode("classification") %>%
set_engine("klaR") %>%
set_args(usekernel = FALSE)
nb_wf <- workflow() %>%
add_model(nb_mode) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wf, titanic_training)
predict(log_fit, new_data = titanic_testing, type = 'prob')
augment(log_fit, new_data = titanic_testing) %>%
conf_mat(truth = survived, estimate = .pred_class)
df <- read.table('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/HWs/homework-3/data/titanic.csv')
df <- read.csv('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/HWs/homework-3/data/titanic.csv')
df
set.seed(891) # keep the outcome stable
as.factor(df$survived)
titanic_split <- initial_split(df, prop = 0.80, strata = survived) # split the data and stratified on survived
titanic_training <- training(titanic_split) # extract the training data
titanic_testing <- testing(titanic_split) # extract the testing data
#titanic_training
# titanic_testing
predict(log_fit, new_data = titanic_testing, type = 'prob')
augment(log_fit, new_data = titanic_testing) %>%
conf_mat(truth = survived, estimate = .pred_class)
set.seed(891) # keep the outcome stable
survived_factor <- as.factor(df$survived)
titanic_split <- initial_split(df, prop = 0.80, strata = survived) # split the data and stratified on survived
titanic_training <- training(titanic_split) # extract the training data
titanic_testing <- testing(titanic_split) # extract the testing data
#titanic_training
# titanic_testing
predict(log_fit, new_data = titanic_testing, type = 'prob')
augment(log_fit, new_data = titanic_testing) %>%
conf_mat(truth = survived_factor, estimate = .pred_class)
set.seed(891) # keep the outcome stable
df[,'survived'] <- as.factor(df[,'sruvived'])
set.seed(891) # keep the outcome stable
df[,'survived'] <- as.factor(df[,'survived'])
titanic_split <- initial_split(df, prop = 0.80, strata = survived) # split the data and stratified on survived
titanic_training <- training(titanic_split) # extract the training data
titanic_testing <- testing(titanic_split) # extract the testing data
#titanic_training
# titanic_testing
predict(log_fit, new_data = titanic_testing, type = 'prob')
augment(log_fit, new_data = titanic_testing) %>%
conf_mat(truth = survived, estimate = .pred_class)
