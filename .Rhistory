mutate(model = c('Logistic Regression Model', 'Random Forest Model', 'Boost Tree Model', 'K-nearest Neighbor'), .before = .metric)
bind_rows(water_log, water_forest_best[2,c(4,5,6)], water_boosted_best[2,c(2,3,4)], water_knn_best[2,c(2,3,4)]) %>%
tibble() %>%
mutate(model = c('Logistic Regression Model', 'Random Forest Model', 'Boost Tree Model', 'K-nearest Neighbor'), .before = .metric)
bind_rows(water_log, water_forest_best[1,c(4,5,6)], water_boosted_best[1,c(2,3,4)], water_knn_best[1,c(2,3,4)]) %>%
tibble() %>%
mutate(model = c('Logistic Regression Model', 'Random Forest Model', 'Boost Tree Model', 'K-nearest Neighbor'), .before = .metric)
best_model <- select_best(water_tune_forest)
best_model
matx_list1
collect_metrics(water_tune_forest)
water_forest_best
best_model <- select_best(water_tune_forest)
best_wkflow <- finalize_workflow(water_forest_wkflow, best_model)
best_fit <- fit(best_wkflow, water_training)
finalaug <- augment(best_fit, water_testing, type = 'prob')
roc_auc(finalaug, truth = potability, estimate = .pred_1)
conf_mat(finalaug, truth = potability, estimate = .pred_class) %>%
autoplot('heatmap')
roc_curve(finalaug, truth = potability, estimate = .pred_1) %>%
autoplot()
water_log_fit
water_tune_forest
water_tune_boost
knitr::opts_chunk$set(cache = TRUE)
library(kknn)
library(class)
library(compiler)
library(xgboost)
library(vip)
library(ranger)
library(rpart.plot)
library(corrplot)
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(pROC)
library(janitor)
library(glmnet)
library(ISLR)
library(ISLR2)
tidymodels_prefer()
waterdata <- read.csv('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/Pstat131/Final Project/water_potability.csv')
waterdata <- clean_names(waterdata)
waterdata <- na.omit(waterdata)
waterdata <- mutate(waterdata, potability =
factor(potability, levels = c(1,0))) # make sure that 1 represents success.
ggplot(waterdata, aes(potability))+
geom_bar()
cor_water <- waterdata %>%
select(-potability) %>%
cor(use = 'complete.obs', method = 'pearson')
corrplot(cor_water, method = 'number', type = 'lower') # draw the correlation plot
df <- gather(waterdata, key = 'variable', value = 'value', -potability)
ggplot(df, aes(x = value, group = potability, color = potability))+
geom_density()+
facet_wrap(~variable, scales = 'free')+
theme_bw()
set.seed(5454)
water.split <- initial_split(waterdata, prop = 0.8, strata = potability)
water_training <- training(water.split)
water_testing <- testing(water.split)
water_fold <- vfold_cv(water_training, v = 5, strata = potability) # cross validation
water_recipe <- recipe(potability~., data = water_training)%>% # create a recipe that used later.
step_scale(all_predictors()) %>%
step_center(all_predictors())
water_recipe %>%
prep() %>%
juice()
water_log_reg <- logistic_reg() %>%
set_engine('glm') %>%
set_mode('classification')
water_log_wf <- workflow() %>%
add_model(water_log_reg) %>%
add_recipe(water_recipe)
water_log_fit <- fit(water_log_wf, water_training)
water_log <- augment(water_log_fit, water_training, type = 'prob') %>%
roc_auc(truth = potability, estimate = .pred_1)
water_log
water_forest_model <- rand_forest(mtry = tune(), trees = tune(), min_n = tune()) %>%
set_engine('ranger', importance = "impurity") %>%
set_mode('classification')
water_forest_wkflow <- workflow() %>%
add_model(water_forest_model) %>%
add_recipe(water_recipe)
param1_grid <- grid_regular(mtry(range = c(1,9)), trees(range = c(200,400)), min_n(range = c(2,9)), levels = 5)
water_tune_forest <- tune_grid(
water_forest_wkflow,
resamples = water_fold,
grid = param1_grid,
metrics = metric_set(roc_auc)
)
autoplot(water_tune_forest)
matx_list1 <- collect_metrics(water_tune_forest)
water_forest_best <- arrange(matx_list1, desc(mean))[1,]
water_boost_model <- boost_tree(trees = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
water_boost_wkflow <- workflow() %>%
add_model(water_boost_model) %>%
add_recipe(water_recipe)
param2_grid <- grid_regular(trees(range(c(10,2000))), levels = 10)
water_tune_boost <- tune_grid(
water_boost_wkflow,
resamples = water_fold,
grid = param2_grid,
metrics = metric_set(roc_auc)
)
autoplot(water_tune_boost)
matx_list2 <- collect_metrics(water_tune_boost)
water_boosted_best <- arrange(matx_list2, desc(mean))[1,]
water_knn_model <- nearest_neighbor(neighbors = tune()) %>%
set_engine('kknn') %>%
set_mode('classification')
water_knn_wkflow <- workflow() %>%
add_model(water_knn_model) %>%
add_recipe(water_recipe)
param3_grid <- grid_regular(neighbors(range = c(20,60)), levels = 10)
knn_tune <- tune_grid(
water_knn_wkflow,
resamples = water_fold,
grid = param3_grid,
metrics = metric_set(roc_auc)
)
autoplot(knn_tune)
matx_list3 <- collect_metrics(knn_tune)
water_knn_best <- arrange(matx_list3, desc(mean))[1,]
best_model <- select_best(water_tune_forest)
best_wkflow <- finalize_workflow(water_forest_wkflow, best_model)
best_fit <- fit(best_wkflow, water_training)
finalaug <- augment(best_fit, water_testing, type = 'prob')
roc_auc(finalaug, truth = potability, estimate = .pred_1)
conf_mat(finalaug, truth = potability, estimate = .pred_class) %>%
autoplot('heatmap')
roc_curve(finalaug, truth = potability, estimate = .pred_1) %>%
autoplot()
extract_fit_engine(best_fit) %>%
vip()
knitr::opts_chunk$set(cache = TRUE)
library(kknn)
library(class)
library(compiler)
library(xgboost)
library(vip)
library(ranger)
library(rpart.plot)
library(corrplot)
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(pROC)
library(janitor)
library(glmnet)
library(ISLR)
library(ISLR2)
tidymodels_prefer()
waterdata <- read.csv('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/Pstat131/Final Project/water_potability.csv')
waterdata <- clean_names(waterdata)
waterdata <- na.omit(waterdata)
waterdata <- mutate(waterdata, potability =
factor(potability, levels = c(1,0))) # make sure that 1 represents success.
ggplot(waterdata, aes(potability))+
geom_bar()
cor_water <- waterdata %>%
select(-potability) %>%
cor(use = 'complete.obs', method = 'pearson')
corrplot(cor_water, method = 'number', type = 'lower') # draw the correlation plot
df <- gather(waterdata, key = 'variable', value = 'value', -potability)
ggplot(df, aes(x = value, group = potability, color = potability))+
geom_density()+
facet_wrap(~variable, scales = 'free')+
theme_bw()
set.seed(5454)
water.split <- initial_split(waterdata, prop = 0.8, strata = potability)
water_training <- training(water.split)
water_testing <- testing(water.split)
water_fold <- vfold_cv(water_training, v = 5, strata = potability) # cross validation
water_recipe <- recipe(potability~., data = water_training)%>% # create a recipe that used later.
step_scale(all_predictors()) %>%
step_center(all_predictors())
water_recipe %>%
prep() %>%
juice()
water_log_reg <- logistic_reg() %>%
set_engine('glm') %>%
set_mode('classification')
water_log_wf <- workflow() %>%
add_model(water_log_reg) %>%
add_recipe(water_recipe)
water_log_fit <- fit(water_log_wf, water_training)
water_log <- augment(water_log_fit, water_training, type = 'prob') %>%
roc_auc(truth = potability, estimate = .pred_1)
water_log
water_forest_model <- rand_forest(mtry = tune(), trees = tune(), min_n = tune()) %>%
set_engine('ranger', importance = "impurity") %>%
set_mode('classification')
water_forest_wkflow <- workflow() %>%
add_model(water_forest_model) %>%
add_recipe(water_recipe)
param1_grid <- grid_regular(mtry(range = c(1,9)), trees(range = c(200,400)), min_n(range = c(2,9)), levels = 5)
water_tune_forest <- tune_grid(
water_forest_wkflow,
resamples = water_fold,
grid = param1_grid,
metrics = metric_set(roc_auc)
)
autoplot(water_tune_forest)
matx_list1 <- collect_metrics(water_tune_forest)
water_forest_best <- arrange(matx_list1, desc(mean))[1,]
water_forest_best
water_boost_model <- boost_tree(trees = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
water_boost_wkflow <- workflow() %>%
add_model(water_boost_model) %>%
add_recipe(water_recipe)
param2_grid <- grid_regular(trees(range(c(10,2000))), levels = 10)
water_tune_boost <- tune_grid(
water_boost_wkflow,
resamples = water_fold,
grid = param2_grid,
metrics = metric_set(roc_auc)
)
autoplot(water_tune_boost)
matx_list2 <- collect_metrics(water_tune_boost)
water_boosted_best <- arrange(matx_list2, desc(mean))[1,]
water_boosted_best
water_knn_model <- nearest_neighbor(neighbors = tune()) %>%
set_engine('kknn') %>%
set_mode('classification')
water_knn_wkflow <- workflow() %>%
add_model(water_knn_model) %>%
add_recipe(water_recipe)
param3_grid <- grid_regular(neighbors(range = c(20,60)), levels = 10)
knn_tune <- tune_grid(
water_knn_wkflow,
resamples = water_fold,
grid = param3_grid,
metrics = metric_set(roc_auc)
)
autoplot(knn_tune)
matx_list3 <- collect_metrics(knn_tune)
water_knn_best <- arrange(matx_list3, desc(mean))[1,]
water_knn_best
best_model <- select_best(water_tune_forest)
best_wkflow <- finalize_workflow(water_forest_wkflow, best_model)
best_fit <- fit(best_wkflow, water_training)
finalaug <- augment(best_fit, water_testing, type = 'prob')
roc_auc(finalaug, truth = potability, estimate = .pred_1)
conf_mat(finalaug, truth = potability, estimate = .pred_class) %>%
autoplot('heatmap')
roc_curve(finalaug, truth = potability, estimate = .pred_1) %>%
autoplot()
extract_fit_engine(best_fit) %>%
vip()
accuracy(finalaug, truth = potability, estimate = .pred_1)
finalaug <- augment(best_fit, water_testing, type = 'prob') %>%
accuracy(truth = potability, estimate = .pred_1)
finalaug <- augment(best_fit, water_testing, type = 'prob') %>%
accuracy(truth = potability, estimate = .pred_1:.pred_0)
augment(best_fit, water_testing, type = 'prob')
finalaug <- augment(best_fit, water_testing, type = 'prob') %>%
accuracy(truth = potability, estimate = .pred_class)
finalaug
finalaug <- augment(best_fit, water_testing, type = 'prob')
?finalize_workflow
water_laso_reg <- linear_reg(penalty = tune(), mixture = 1) %>%
set_mode("classification") %>%
set_engine("glmnet")
water_log_reg <- logistic_reg() %>%
set_engine('glm') %>%
set_mode('classification')
water_log_wf <- workflow() %>%
add_model(water_log_reg) %>%
add_recipe(water_recipe)
water_log_fit <- fit(water_log_wf, water_training)
water_log <- augment(water_log_fit, water_training, type = 'prob') %>%
roc_auc(truth = potability, estimate = .pred_1)
water_log
knitr::opts_chunk$set(cache = TRUE)
library(kknn)
library(class)
library(compiler)
library(xgboost)
library(vip)
library(ranger)
library(rpart.plot)
library(corrplot)
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(pROC)
library(janitor)
library(glmnet)
library(ISLR)
library(ISLR2)
tidymodels_prefer()
waterdata <- read.csv('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/Pstat131/Final Project/water_potability.csv')
waterdata <- clean_names(waterdata)
waterdata <- na.omit(waterdata)
waterdata <- mutate(waterdata, potability =
factor(potability, levels = c(1,0))) # make sure that 1 represents success.
ggplot(waterdata, aes(potability))+
geom_bar()
cor_water <- waterdata %>%
select(-potability) %>%
cor(use = 'complete.obs', method = 'pearson')
corrplot(cor_water, method = 'number', type = 'lower') # draw the correlation plot
df <- gather(waterdata, key = 'variable', value = 'value', -potability)
ggplot(df, aes(x = value, group = potability, color = potability))+
geom_density()+
facet_wrap(~variable, scales = 'free')+
theme_bw()
set.seed(5454)
water.split <- initial_split(waterdata, prop = 0.8, strata = potability)
water_training <- training(water.split)
water_testing <- testing(water.split)
water_fold <- vfold_cv(water_training, v = 5, strata = potability) # cross validation
water_recipe <- recipe(potability~., data = water_training)%>% # create a recipe that used later.
step_scale(all_predictors()) %>%
step_center(all_predictors())
water_recipe %>%
prep() %>%
juice()
water_log_reg <- logistic_reg() %>%
set_engine('glm') %>%
set_mode('classification')
water_log_wf <- workflow() %>%
add_model(water_log_reg) %>%
add_recipe(water_recipe)
water_log_fit <- fit(water_log_wf, water_training)
water_log <- augment(water_log_fit, water_training, type = 'prob') %>%
roc_auc(truth = potability, estimate = .pred_1)
water_log
water_forest_model <- rand_forest(mtry = tune(), trees = tune(), min_n = tune()) %>%
set_engine('ranger', importance = "impurity") %>%
set_mode('classification')
water_forest_wkflow <- workflow() %>%
add_model(water_forest_model) %>%
add_recipe(water_recipe)
param1_grid <- grid_regular(mtry(range = c(1,9)), trees(range = c(200,400)), min_n(range = c(2,9)), levels = 5)
water_tune_forest <- tune_grid(
water_forest_wkflow,
resamples = water_fold,
grid = param1_grid,
metrics = metric_set(roc_auc)
)
autoplot(water_tune_forest)
matx_list1 <- collect_metrics(water_tune_forest)
water_forest_best <- arrange(matx_list1, desc(mean))[1,]
water_forest_best
water_boost_model <- boost_tree(trees = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
water_boost_wkflow <- workflow() %>%
add_model(water_boost_model) %>%
add_recipe(water_recipe)
param2_grid <- grid_regular(trees(range(c(10,2000))), levels = 10)
water_tune_boost <- tune_grid(
water_boost_wkflow,
resamples = water_fold,
grid = param2_grid,
metrics = metric_set(roc_auc)
)
autoplot(water_tune_boost)
matx_list2 <- collect_metrics(water_tune_boost)
water_boosted_best <- arrange(matx_list2, desc(mean))[1,]
water_boosted_best
water_knn_model <- nearest_neighbor(neighbors = tune()) %>%
set_engine('kknn') %>%
set_mode('classification')
water_knn_wkflow <- workflow() %>%
add_model(water_knn_model) %>%
add_recipe(water_recipe)
param3_grid <- grid_regular(neighbors(range = c(20,60)), levels = 10)
knn_tune <- tune_grid(
water_knn_wkflow,
resamples = water_fold,
grid = param3_grid,
metrics = metric_set(roc_auc)
)
autoplot(knn_tune)
matx_list3 <- collect_metrics(knn_tune)
water_knn_best <- arrange(matx_list3, desc(mean))[1,]
water_knn_best
best_model <- select_best(water_tune_forest)
best_wkflow <- finalize_workflow(water_forest_wkflow, best_model)
best_fit <- fit(best_wkflow, water_training)
finalaug <- augment(best_fit, water_testing, type = 'prob')
roc_auc(finalaug, truth = potability, estimate = .pred_1)
conf_mat(finalaug, truth = potability, estimate = .pred_class) %>%
autoplot('heatmap')
roc_curve(finalaug, truth = potability, estimate = .pred_1) %>%
autoplot()
extract_fit_engine(best_fit) %>%
vip()
knitr::opts_chunk$set(cache = TRUE)
library(kknn)
library(class)
library(compiler)
library(xgboost)
library(vip)
library(ranger)
library(rpart.plot)
library(corrplot)
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(pROC)
library(janitor)
library(glmnet)
library(ISLR)
library(ISLR2)
tidymodels_prefer()
waterdata <- read.csv('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/Pstat131/Final Project/water_potability.csv')
waterdata <- clean_names(waterdata)
waterdata <- na.omit(waterdata)
waterdata <- mutate(waterdata, potability =
factor(potability, levels = c(1,0))) # make sure that 1 represents success.
ggplot(waterdata, aes(potability))+
geom_bar()
cor_water <- waterdata %>%
select(-potability) %>%
cor(use = 'complete.obs', method = 'pearson')
corrplot(cor_water, method = 'number', type = 'lower') # draw the correlation plot
df <- gather(waterdata, key = 'variable', value = 'value', -potability)
ggplot(df, aes(x = value, group = potability, color = potability))+
geom_density()+
facet_wrap(~variable, scales = 'free')+
theme_bw()
set.seed(5454)
water.split <- initial_split(waterdata, prop = 0.8, strata = potability)
water_training <- training(water.split)
water_testing <- testing(water.split)
water_fold <- vfold_cv(water_training, v = 5, strata = potability) # cross validation
water_recipe <- recipe(potability~., data = water_training)%>% # create a recipe that used later.
step_scale(all_predictors()) %>%
step_center(all_predictors())
water_recipe %>%
prep() %>%
juice()
water_log_reg <- logistic_reg() %>%
set_engine('glm') %>%
set_mode('classification')
water_log_wf <- workflow() %>%
add_model(water_log_reg) %>%
add_recipe(water_recipe)
water_log_fit <- fit(water_log_wf, water_training)
water_log <- augment(water_log_fit, water_fold, type = 'prob') %>%
roc_auc(truth = potability, estimate = .pred_1)
?augment
water_log_reg <- logistic_reg() %>%
set_engine('glm') %>%
set_mode('classification')
waterdata <- read.csv('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/Pstat131/Final Project/water_potability.csv')
waterdata <- clean_names(waterdata)
waterdata <- na.omit(waterdata)
waterdata <- mutate(waterdata, potability =
factor(potability, levels = c(1,0))) # make sure that 1 represents success.
knitr::opts_chunk$set(cache = TRUE)
library(kknn)
library(class)
library(compiler)
library(xgboost)
library(vip)
library(ranger)
library(rpart.plot)
library(corrplot)
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(pROC)
library(janitor)
library(glmnet)
library(ISLR)
library(ISLR2)
tidymodels_prefer()
water_log_reg <- logistic_reg() %>%
set_engine('glm') %>%
set_mode('classification')
water_log_wf <- workflow() %>%
add_model(water_log_reg) %>%
add_recipe(water_recipe)
water_log_fit <- fit(water_log_wf, water_training)
water_log <- augment(water_log_fit, water_training, type = 'prob') %>%
roc_auc(truth = potability, estimate = .pred_1)
water_log
