tibble() %>% mutate(model = rep(c("Logistic Regression", "Linear Discrminant Analysis", "Quadratic Discrminant Analysis"), each = 2)) %>%
dplyr::select(model, mean, std_err)
results
select_by_one_std_err(results)
?select_by_one_std_err
mx1 <- collect_metrics(log_fit)
mx1
mx2 <- collect_metrics(lda_fit)
mx2
mx3 <- collect_metrics(qda_fit)
mx3
results <- bind_rows(mx1, mx2, mx3) %>%
tibble() %>% mutate(model = rep(c("Logistic Regression", "Linear Discrminant Analysis", "Quadratic Discrminant Analysis"), each = 2)) %>%
dplyr::select(model, mean, std_err)
results
show_best(results, metric = 'rmse')
mx1 <- collect_metrics(log_fit)
mx1
mx2 <- collect_metrics(lda_fit)
mx2
mx3 <- collect_metrics(qda_fit)
mx3
results <- bind_rows(mx1, mx2, mx3) %>%
tibble() %>% mutate(model = rep(c("Logistic Regression", "Linear Discrminant Analysis", "Quadratic Discrminant Analysis"), each = 2)) %>%
dplyr::select(model, mean, std_err)
results
show_best(results, metric = 'mean')
mx1 <- collect_metrics(log_fit)
mx1
mx2 <- collect_metrics(lda_fit)
mx2
mx3 <- collect_metrics(qda_fit)
mx3
results <- bind_rows(mx1, mx2, mx3) %>%
tibble() %>% mutate(model = rep(c("Logistic Regression", "Linear Discrminant Analysis", "Quadratic Discrminant Analysis"), each = 2)) %>%
dplyr::select(model, mean, std_err)
results
dplyr::show_best(results, metric = 'mean')
mx1 <- collect_metrics(log_fit)
mx1
mx2 <- collect_metrics(lda_fit)
mx2
mx3 <- collect_metrics(qda_fit)
mx3
results <- bind_rows(mx1, mx2, mx3) %>%
tibble() %>% mutate(model = rep(c("Logistic Regression", "Linear Discrminant Analysis", "Quadratic Discrminant Analysis"), each = 2)) %>%
dplyr::select(model, mean, std_err)
results
MASS::show_best(results, metric = 'mean')
mx1 <- collect_metrics(log_fit)
mx1
mx2 <- collect_metrics(lda_fit)
mx2
mx3 <- collect_metrics(qda_fit)
mx3
results <- bind_rows(mx1, mx2, mx3) %>%
tibble() %>% mutate(model = rep(c("Logistic Regression", "Linear Discrminant Analysis", "Quadratic Discrminant Analysis"), each = 2)) %>%
dplyr::select(model, mean, std_err)
results
tune::show_best(results, metric = 'mean')
mx1 <- collect_metrics(log_fit)
mx1
mx2 <- collect_metrics(lda_fit)
mx2
mx3 <- collect_metrics(qda_fit)
mx3
results <- bind_rows(mx1, mx2, mx3) %>%
tibble() %>% mutate(model = rep(c("Logistic Regression", "Linear Discrminant Analysis", "Quadratic Discrminant Analysis"), each = 2)) %>%
dplyr::select(model, mean, std_err)
results
tune::show_best(results, std_err, metric = 'mean')
mx1 <- collect_metrics(log_fit)
mx1
mx2 <- collect_metrics(lda_fit)
mx2
mx3 <- collect_metrics(qda_fit)
mx3
results <- bind_rows(mx1, mx2, mx3) %>%
tibble() %>% mutate(model = rep(c("Logistic Regression", "Linear Discrminant Analysis", "Quadratic Discrminant Analysis"), each = 2)) %>%
dplyr::select(model, mean, std_err)
results
library(tidymodels)
library(tidymodels)
library(MASS)
tidymodels_prefer()
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(pROC)
tidymodels_prefer()
mx1 <- collect_metrics(log_fit)
mx1
mx2 <- collect_metrics(lda_fit)
mx2
mx3 <- collect_metrics(qda_fit)
mx3
results <- bind_rows(mx1, mx2, mx3) %>%
tibble() %>% mutate(model = rep(c("Logistic Regression", "Linear Discrminant Analysis", "Quadratic Discrminant Analysis"), each = 2)) %>%
dplyr::select(model, .metric, mean, std_err)
results
lda_fit <- fit_resamples(lda_wf, titanic_fold)
log_new_fit <- fit(log_wf, titanic_training)
mx1 <- collect_metrics(log_fit) %>%
accuracy(truth = survived, estimate = .pred_class)
mx1 <- collect_metrics(log_fit) %>%
accuracy()
log_fit <- fit_resamples(log_wf, titanic_fold) %>%
accuracy(truth = survived, estimate = .pred_class)
log_fit <- fit_resamples(log_wf, titanic_fold)
log_acc <- predict(log_new_fit, new_data = titanic_testing, type = 'class') %>%
bind_cols(titanic_training %>% select(survived)) %>%
accuracy(truth = survived, estimate = .pred_class)
log_acc <- predict(log_new_fit, new_data = titanic_testing, type = 'class') %>%
bind_cols(titanic_testing %>% select(survived)) %>%
accuracy(truth = survived, estimate = .pred_class)
log_acc <- predict(log_new_fit, new_data = titanic_testing, type = 'class') %>%
bind_cols(titanic_testing %>% select(survived)) %>%
accuracy(truth = survived, estimate = .pred_class)
log_acc
mx1 <- collect_metrics(log_fit)
mx1
mx2 <- collect_metrics(lda_fit)
mx2
mx3 <- collect_metrics(qda_fit)
mx3
results <- bind_rows(mx1, mx2, mx3) %>%
tibble() %>% mutate(model = rep(c("Logistic Regression", "Linear Discrminant Analysis", "Quadratic Discrminant Analysis"), each = 2)) %>%
dplyr::select(model, .metric, mean, std_err)
results
library(xts)
library(quantmod)
library(xts)
library(quantmod)
library(ggplot2)
library(tidymodels)
library(tidyverse)
tidymodel.prefer()
library(xts)
library(quantmod)
library(ggplot2)
library(tidymodels)
library(tidyverse)
tidymodels_prefer()
start_date <- as.Date("2018-07-01")
end_date <- as.Date("2022-09-30")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData
start_date <- as.Date("2018-07-01")
end_date <- as.Date("2022-10-30")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData
start_date <- as.Date("2018-07-01")
end_date <- as.Date("2022-10-30")
TSLAData <- ts(getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F))
TSLAData
start_date <- as.Date("2018-07-01")
end_date <- as.Date("2022-10-30")
TSLAData <- ts(getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F), start = c(2018,1), frequency = 12)
TSLAData
start_date <- as.Date("2018-07-01")
end_date <- as.Date("2022-10-30")
TSLAData <- ts(getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F), start = c(2018,1), frequency = 365)
TSLAData
start_date <- as.Date("2018-07-01")
end_date <- as.Date("2022-10-30")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData
start_date <- as.Date("2018-07-01")
end_date <- as.Date("2022-10-30")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData_Open <- TSLAData$TSLA.Open
start_date <- as.Date("2018-07-01")
end_date <- as.Date("2022-10-30")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData_Open <- TSLAData$TSLA.Open
TSLAData_Open
start_date <- as.Date("2018-06-30")
end_date <- as.Date("2022-10-30")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData_Open <- TSLAData$TSLA.Open
start_date <- as.Date("2018-06-30")
end_date <- as.Date("2022-10-30")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData_Open <- TSLAData$TSLA.Open
TSLAData_Open
start_date <- as.Date("2018-07-01")
end_date <- as.Date("2022-10-30")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData_Open <- ts(TSLAData$TSLA.Open, start = c(2018,7), frequency = 365)
TSLAData_Open
start_date <- as.Date("2019-01-01")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData_Open <- ts(TSLAData$TSLA.Open, start = c(2018,7), frequency = 365)
start_date <- as.Date("2019-01-01")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData_Open <- ts(TSLAData$TSLA.Open, start = c(2018,1), frequency = 365)
TSLAData_Open
start_date <- as.Date("2019-01-01")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData_Open <- ts(TSLAData[1], start = c(2018,1), frequency = 365)
TSLAData_Open
start_date <- as.Date("2019-01-01")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData_Open <- ts(TSLAData[1,], start = c(2018,1), frequency = 365)
TSLAData_Open
start_date <- as.Date("2019-01-01")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData
TSLAData_Open <- ts(TSLAData[1,], start = c(2018,1), frequency = 365)
TSLAData_Open
start_date <- as.Date("2019-01-01")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData[1]
TSLAData_Open <- ts(TSLAData[1,], start = c(2018,1), frequency = 365)
TSLAData_Open
start_date <- as.Date("2019-01-01")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData[1]
TSLAData_Open <- ts(TSLAData[1,], start = c(2018,1), frequency = 365)
#TSLAData_Open
start_date <- as.Date("2018-12-31")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData[1]
TSLAData_Open <- ts(TSLAData[1,], start = c(2018,1), frequency = 365)
#TSLAData_Open
start_date <- as.Date("2018-01-01")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData[1]
TSLAData_Open <- ts(TSLAData[1,], start = c(2018,1), frequency = 365)
#TSLAData_Open
start_date <- as.Date("2018-01-01")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData[,1]
TSLAData_Open <- ts(TSLAData[1,], start = c(2018,1), frequency = 365)
#TSLAData_Open
start_date <- as.Date("2018-01-01")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData[,1]
TSLAData_Open <- ts(TSLAData[1,], start = c(2018,1), frequency = 365)
TSLAData_Open
start_date <- as.Date("2018-01-01")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData[,1]
TSLAData_Open <- ts(TSLAData[,1], start = c(2018,1), frequency = 365)
TSLAData_Open
start_date <- as.Date("2018-01-01")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData_Open <- ts(TSLAData[,1], start = c(2018,1), frequency = 365)
TSLAData_Open
start_date <- as.Date("2018-01-01")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData
TSLAData_Open <- ts(TSLAData[,1], start = c(2018,1), frequency = 365)
TSLAData_Open
start_date <- as.Date("2018-01-01")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData_Open <- TSLAData$TSLA.Open
TSLAData_Close <- TSLAData$TSLA.Close
Volume <- TSLAData$TSLA.Volume
start_date <- as.Date("2018-01-01")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData_Open <- TSLAData$TSLA.Open
TSLAData_Close <- TSLAData$TSLA.Close
Volume <- TSLAData$TSLA.Volume
Svariance <- TSLAData$TSLA.Close-TSLAData$TSLA.Open
start_date <- as.Date("2018-01-01")
end_date <- as.Date("2022-10-31")
TSLAData <- getSymbols('TSLA', from = start_date, to = end_date, auto.assign = F)
TSLAData_Open <- TSLAData$TSLA.Open
TSLAData_Close <- TSLAData$TSLA.Close
Volume <- TSLAData$TSLA.Volume
Svariance <- TSLAData$TSLA.Close-TSLAData$TSLA.Open
Svariance
inflation <- read.csv('inflationrate.csv')
inflation <- read.csv('inflationrate.csv')
inflation
inflation <- read.csv('inflationrate.csv')
inflation
inflation <- ts(read.csv('inflationrate.csv'), start = c(12,1), frequence=12)
inflation <- ts(read.csv('inflationrate.csv'), start = c(12,1), frequence = 12)
inflation <- ts(read.csv('inflationrate.csv'), start = c(2012,1), frequence = 12)
inflation <- ts(read.csv('inflationrate.csv'), start = c(2012,1))
inflation <- ts(read.csv('inflationrate.csv'), start = c(2012,1))
inflation
inflation <- ts(read.csv('inflationrate.csv')[,1:13], start = c(2012,1))
inflation
inflation <- ts(read.csv('inflationrate.csv')[,1:13], start = c(2012,1), frequence = 12)
?ts
inflation <- ts(read.csv('inflationrate.csv')[,1:13], start = c(2012,1), frequency = 12)
inflation
inflation <- ts(read.csv('inflationrate.csv'), start = c(2012,1), frequency = 12)
inflation
inflation <- ts(read.csv('inflationrate.csv')[,1:13], start = c(2012,1), frequency = 12)
inflation
inflation <- ts(read.csv('inflationrate.csv')[,1:13], start = c(2012,1), frequency = 12)
inflation[,1]
inflation <- ts(read.csv('inflationrate.csv')[,1:13])
inflation
inflation <- ts(read.csv('inflationrate.csv')[,1:13],frequency = 12)
inflation
inflation <- ts(read.csv('inflationrate.csv')[2:11,2:13],frequency = 12)
inflation
inflation <- ts(read.csv('inflationrate.csv')[2:11,2:13],start=c(2012,1), frequency = 12)
inflation
inflation <- ts(read.csv('inflationrate.csv')[2:11,2:13])
inflation
inflation <- ts(read.csv('inflationrate.csv')[3:11,2:13])
inflation
inflation <- ts(read.csv('inflationrate.csv')[2:11,2:13])
inflation
inflation <- ts(read.csv('inflationrate.csv')[1:11,2:13])
inflation
inflation <- ts(read.csv('inflationrate.csv')[2:11,2:13])
inflation
inflation <- ts(read.csv('inflationrate.csv')[1:11,2:13])
inflation
inflation <- ts(read.csv('inflationrate.csv')[0:11,2:13])
inflation
inflation <- ts(read.csv('inflationrate.csv')[,2:13])
inflation
inflation <- ts(read.csv('inflationrate.csv')[,2:13], frequency = 12)
inflation
inflation <- ts(read.csv('inflationrate.csv')[,2:13], start=c(2012,1), frequency = 12)
inflation
inflation <- ts(read.csv('inflationrate.csv'))
inflation
inflation <- ts(read.csv('inflationrate.csv'))
plot(inflation)
inflation <- ts(read.csv('inflationrate.csv'))
plot.ts(inflation)
inflation <- ts(read.csv('inflationrate.csv')[,2:13])
plot.ts(inflation)
inflation <- ts(read.csv('inflationrate.csv')[,2:13])
inflation
plot.ts(inflation)
inflation <- ts(read.csv('inflationrate.csv')[,1:13])
inflation
plot.ts(inflation)
inflation <- read.csv('inflationrate.csv', header = F, skip = 1)
inflation
plot.ts(inflation)
inflation <- read.csv('inflationrate.csv', header = F, skip = 1)
inflation
inflation <- read.csv('inflationrate.csv', header = F, skip = 1)
tsinflation <- ts(inflation[,2:13], start = c(2012,1), frequency = 12)
inflation
inflation <- read.csv('inflationrate.csv', header = F, skip = 1)
tsinflation <- ts(inflation[,2:13], start = c(2012,1), frequency = 12)
tsinflation
inflation <- read.csv('inflationrate.csv', header = F)
inflation
tsinflation <- ts(inflation[,2:13], start = c(2012,1), frequency = 12)
tsinflation
inflation <- read.csv('inflationrate.csv', header = F)
ts(inflation)
tsinflation <- ts(inflation[,2:13], start = c(2012,1), frequency = 12)
tsinflation
inflation <- read.csv('inflationrate.csv', header = F)
ts(inflation)
inflation <- read.csv('inflationrate.csv', header = F)
inflation <- read.csv('inflationrate.csv', header = F)
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(pROC)
tidymodels_prefer()
df <- read.csv('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/HWs/homework-3/data/titanic.csv') %>%
mutate(survived = factor(survived,
levels = c("Yes", "No")),
pclass = factor(pclass))
set.seed(891) # keep the outcome stable
titanic_split <- initial_split(df, prop = 0.80, strata = survived) # split the data and stratified on survived
titanic_training <- training(titanic_split) # extract the training data
titanic_testing <- testing(titanic_split) # extract the testing data
titanic_fold <- vfold_cv(titanic_training, v=10)
titanic_fold
titanic_recipe <- recipe(survived ~ pclass+sex+age+sib_sp+parch+fare, data = titanic_training) %>%
step_impute_linear(age) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(terms = ~ starts_with('sex'):fare+
age:fare)
summary(titanic_recipe)
log_reg <- logistic_reg() %>%
set_engine('glm') %>%
set_mode('classification')
log_wf <- workflow() %>%
add_model(log_reg) %>%
add_recipe(titanic_recipe)
#log_fit <- fit(log_wf, titanic_training)
lda_mode <- discrim_linear() %>%
set_engine('MASS') %>%
set_mode('classification')
lda_wf <- workflow() %>%
add_model(lda_mode) %>%
add_recipe(titanic_recipe)
#lda_fit <- fit(lda_wf, titanic_training)
qda_mode <- discrim_quad() %>%
set_engine('MASS') %>%
set_mode('classification')
qda_wf <- workflow() %>%
add_model(qda_mode) %>%
add_recipe(titanic_recipe)
#qda_fit <- fit(qda_wf, titanic_training)
log_fit <- fit_resamples(log_wf, titanic_fold)
lda_fit <- fit_resamples(lda_wf, titanic_fold)
qda_fit <- fit_resamples(qda_wf, titanic_fold)
mx1 <- collect_metrics(log_fit)
mx1
mx2 <- collect_metrics(lda_fit)
mx2
mx3 <- collect_metrics(qda_fit)
mx3
results <- bind_rows(mx1, mx2, mx3) %>%
tibble() %>% mutate(model = rep(c("Logistic Regression", "Linear Discrminant Analysis", "Quadratic Discrminant Analysis"), each = 2)) %>%
dplyr::select(model, .metric, mean, std_err)
results
log_new_fit <- fit(log_wf, titanic_training)
log_acc <- predict(log_new_fit, new_data = titanic_testing, type = 'class') %>%
bind_cols(titanic_testing %>% select(survived)) %>%
accuracy(truth = survived, estimate = .pred_class)
log_acc
library(tidymodels)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrr)
library(discrim)
library(poissonreg)
library(klaR)
library(pROC)
tidymodels_prefer()
df <- read.csv('/Users/wentaoyu/Documents/UCSB File/Stats/Pstat131/HWs/homework-3/data/titanic.csv') %>%
mutate(survived = factor(survived,
levels = c("Yes", "No")),
pclass = factor(pclass))
set.seed(891) # keep the outcome stable
titanic_split <- initial_split(df, prop = 0.80, strata = survived) # split the data and stratified on survived
titanic_training <- training(titanic_split) # extract the training data
titanic_testing <- testing(titanic_split) # extract the testing data
titanic_fold <- vfold_cv(titanic_training, v=10)
titanic_fold
titanic_recipe <- recipe(survived ~ pclass+sex+age+sib_sp+parch+fare, data = titanic_training) %>%
step_impute_linear(age) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(terms = ~ starts_with('sex'):fare+
age:fare)
summary(titanic_recipe)
log_reg <- logistic_reg() %>%
set_engine('glm') %>%
set_mode('classification')
log_wf <- workflow() %>%
add_model(log_reg) %>%
add_recipe(titanic_recipe)
#log_fit <- fit(log_wf, titanic_training)
lda_mode <- discrim_linear() %>%
set_engine('MASS') %>%
set_mode('classification')
lda_wf <- workflow() %>%
add_model(lda_mode) %>%
add_recipe(titanic_recipe)
#lda_fit <- fit(lda_wf, titanic_training)
qda_mode <- discrim_quad() %>%
set_engine('MASS') %>%
set_mode('classification')
qda_wf <- workflow() %>%
add_model(qda_mode) %>%
add_recipe(titanic_recipe)
#qda_fit <- fit(qda_wf, titanic_training)
log_fit <- fit_resamples(log_wf, titanic_fold)
lda_fit <- fit_resamples(lda_wf, titanic_fold)
qda_fit <- fit_resamples(qda_wf, titanic_fold)
mx1 <- collect_metrics(log_fit)
mx1
mx2 <- collect_metrics(lda_fit)
mx2
mx3 <- collect_metrics(qda_fit)
mx3
results <- bind_rows(mx1, mx2, mx3) %>%
tibble() %>% mutate(model = rep(c("Logistic Regression", "Linear Discrminant Analysis", "Quadratic Discrminant Analysis"), each = 2)) %>%
dplyr::select(model, .metric, mean, std_err)
results
log_new_fit <- fit(log_wf, titanic_training)
log_acc <- predict(log_new_fit, new_data = titanic_testing, type = 'class') %>%
bind_cols(titanic_testing %>% select(survived)) %>%
accuracy(truth = survived, estimate = .pred_class)
log_acc
